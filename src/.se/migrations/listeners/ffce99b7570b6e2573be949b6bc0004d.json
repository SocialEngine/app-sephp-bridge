{
    "code": "const app = require('app');\n\nasync function apiRequest (endpoint, query = {}) {\n    const url = await app.data.get('sephp:url');\n    const token = await app.data.get('sephp:token');\n    let search = '';\n    let iteration = 0;\n    for (const key of Object.keys(query)) {\n        iteration++;\n        if (iteration !== 1) {\n            search += '&';\n        }\n        search += key + '=' + query[key];\n    }\n    if (search) {\n        search = '?' + search;\n    }\n    const request = await app.fetch(url + '/bridge/migrations' + endpoint + search, {\n        headers: {\n            'SE-Unite-Token': token\n        }\n    });\n    const response = await request.json();\n    // console.log('response', response);\n\n    return response;\n}\n\nasync function handleItem (record) {\n    let user = await app.module.getUserFromLegacyId(record.subject_id);\n    await app.setViewer(user.id);\n\n    let productId = '@SE/User';\n    let typeId = 'status';\n    switch (record.type) {\n        case 'blog_new':\n            productId = '@SE/Topic';\n            typeId = 'topic';\n            break;\n    }\n\n    console.log('Creating:', productId, ':', typeId);\n\n    const post = await app.api.posts.create({\n        productId: productId,\n        typeId: typeId,\n        body: record.body,\n        subject: record.subject || '',\n        objects: {\n            legacy: {\n                id: record.id,\n                type: record.type,\n                params: record.params\n            }\n        }\n    }).catch(e => {\n        console.error(e);\n        return false;\n    });\n\n    if (!post) {\n        return null;\n    }\n\n    console.log('Post:', post.id);\n\n    for (const comment of record.comments) {\n        user = await app.module.getUserFromLegacyId(comment.poster_id);\n        await app.setViewer(user.id);\n        await app.api.posts.create({\n            productId: '@SE/Comment',\n            typeId: 'comment',\n            parentId: post.postId,\n            body: comment.body,\n            objects: {\n                legacy: {\n                    id: comment.id,\n                    params: comment.params\n                }\n            }\n        });\n    }\n}\n\nconst handleMigration = {\n    connections: async function (record) {\n        let user = await app.module.getUserFromLegacyId(record.object_id);\n        let connection = await app.module.getUserFromLegacyId(record.subject_id);\n        await app.setViewer(user.id);\n        const response = await app.api.connections.create(connection.id).catch(() => false);\n        console.log('connection:', user.id, '->', connection.id, '->', response);\n    },\n\n    blogs: handleItem,\n    status: handleItem,\n\n    users: async function (record) {\n        let user = await app.api.users.findByEmail(record.email);\n        if (!user) {\n            if (!record.photo) {\n                record.photo = '';\n            } else {\n                record.photo = 'sephp:' + record.photo;\n            }\n            let group = 'member';\n            switch (record.groups) {\n                case 'admin':\n                    group = 'owner';\n                    break;\n                case 'moderator':\n                    group = 'admin';\n                    break;\n            }\n            record.groups = [group];\n            record.agree = true;\n            user = await app.api.users.create(record);\n        }\n        await app.module.migration.set('users', 'reverse:' + record.id, user.id);\n        await app.module.migration.set('users', 'data:' + user.id, JSON.stringify({\n            user_id: record.id\n        }));\n    }\n};\n\nfunction startMigration (type, cb, limit = 2) {\n    return new Promise(async function (resolve) {\n        const migration = await app.module.migration.get(type);\n        const start = async function request (page) {\n            limit = parseInt(limit);\n            const response = await apiRequest('/' + type, {\n                page: page,\n                limit: limit\n            });\n            await app.module.migration.set(type, 'total', response.total);\n            await app.module.migration.set(type, 'page', page);\n            app.websocket.send(migration.socketId, {\n                page: page,\n                total: response.total,\n                migration: await app.module.migration.get(type)\n            });\n            for (const record of response.records) {\n                await cb(record)\n                    .catch(e => {\n                        console.log('error:', e);\n                    })\n            }\n            if (response.records.length) {\n                return request((page + 1));\n            } else {\n                resolve();\n            }\n        };\n        return start(1);\n    });\n}\n\nmodule.exports = async function ({task}) {\n    task('migration', async function (params) {\n        const type = params.type;\n        const migration = await app.module.migration.get(type);\n        const response = await startMigration(type, handleMigration[type], params.limit).catch(() => {\n            return false;\n        });\n        if (response === false) {\n            await app.module.migration.set(type, 'failed', e.message);\n        } else {\n            await app.module.migration.set(type, 'completed', app.now());\n        }\n        app.websocket.send(migration.socketId, {\n            page: 0,\n            total: 0,\n            migration: await app.module.migration.get(type)\n        });\n    });\n};\n",
    "events": [
        "ApiProductTask.run"
    ],
    "version": "1.0.6"
}