{
    "code": "const app = require('app');\n\nmodule.exports = async function ({router}) {\n    router.put('/users/:id', async function (req, res) {\n        await app.api.adminsOnly();\n        res({\n            id: req.get(':id'),\n            hello: await app.module.updateUser(req.get(':id'), {\n                user_id: req.get('se_user_id')\n            })\n        });\n    });\n\n    router.get('/connect/:auth', async function (req, res) {\n        await app.api.adminsOnly();\n\n        let url = req.get('return');\n        url = url.replace('/admin/unite-bridge/manage', '');\n        const apiKey = await app.site.generateNewApiKey();\n        const viewerApiToken = await app.api.users.generateApiToken(\n            app.viewer.id\n        );\n        const request = await app.fetch(url + '/bridge/connect', {\n                method: 'POST',\n                body: JSON.stringify({\n                    auth: req.get(':auth'),\n                    apiKey: apiKey.publicKey + ':' + apiKey.privateKey,\n                    viewerToken: viewerApiToken.token,\n                    siteId: app.site.id()\n                }),\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            }\n        );\n        const data = await request.json();\n        if (data.error !== undefined) {\n            res(data);\n        } else {\n            await app.data.set('sephp:auth', req.get(':auth'));\n            await app.data.set('sephp:token', data.token);\n            await app.data.set('sephp:url', url);\n            res({\n                success: true\n            });\n        }\n    });\n\n    router.get('/migrations', async function (req, res) {\n        const migrations = [];\n        const records = app.module.migration.all();\n        for (const type of Object.keys(records)) {\n            const migration = await app.module.migration.get(type);\n            migrations.push(migration);\n        }\n        res({\n            records: migrations\n        });\n    });\n\n    router.post('/migrations/:type', async function (req, res) {\n        await app.api.adminsOnly();\n        const type = req.get(':type');\n        const migrations = app.module.migration.all();\n\n        if (migrations[type] === undefined) {\n            app.error('Not a valid migration');\n        }\n\n        const socketId = app.utility.str.random(32);\n\n        await app.module.migration.set(type, 'started', app.now());\n        await app.module.migration.set(type, 'socketId', socketId);\n        await app.module.migration.del(type, 'completed');\n        await app.module.migration.del(type, 'page');\n        await app.module.migration.del(type, 'total');\n\n        const migration = await app.module.migration.get(type);\n        app.task('migration', {\n            type: type,\n            limit: req.get('limit', 100)\n        });\n        res(migration);\n    });\n\n    router.get('/sso', async function (req, res) {\n        const token = req.get('token');\n        if (!token) {\n            app.error('Missing auth token');\n        }\n        const tokenKey = 'auth:token:' + token;\n        let data = await app.data.get(tokenKey);\n        if (!data) {\n            app.error('Not a valid token.');\n        }\n        await app.data.del(tokenKey);\n        data = JSON.parse(data);\n        res({\n            data: data\n        });\n    });\n\n    router.post('/sso', async function (req, res) {\n        await app.api.viewerOnly();\n        const viewer = app.viewer;\n        if (!viewer) {\n            app.error('Need to be logged in.');\n        }\n        const token = app.utility.str.random(128);\n        const user = await app.module.getUser(viewer.id);\n        const url = await app.module.getUrl();\n        const tokenKey = 'auth:token:' + token;\n        app.data.set(tokenKey, JSON.stringify({\n            uniteUserId: viewer.id,\n            viewer: await app.api.users.read(viewer.id, {\n                include: 'email'\n            }),\n            sephpUserId: user ? user.user_id : null\n        }));\n        app.data.expire(tokenKey, 300);\n        res({\n            url: url + '/bridge/sso?token=' + token\n        });\n    });\n};\n",
    "events": [
        "APIRouter:match"
    ],
    "version": "1.0.6"
}