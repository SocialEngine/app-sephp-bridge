{
    "code": "const app = require('app');\n\n// EDIT[123]\n\nmodule.exports = async function ({router}) {\n    router.get('/redirect', async function (req, res) {\n        const uri = req.get('uri');\n        const handleRedirection = (type) => {\n            return async (segmentKeys) => {\n                const postId = await app.module.migration.getKey('posts', type + ':' + segmentKeys[':id']);\n                console.log('segmentKeys', type + ':' + segmentKeys[':id'], postId);\n                const post = await app.api.posts.read(postId).catch(() => false);\n                if (!post) {\n                    return false;\n                }\n                return post.permalink;\n            };\n        };\n        const map = [\n            {\n                match: [\n                    '/forums/topic/:id/:title/view/post_id/:post',\n                    '/forums/topic/:id/:title'\n                ],\n                action: handleRedirection('engine4_forum_topics')\n            },\n            {\n                match: [\n                    '/blogs/:category/:id/:title'\n                ],\n                action: handleRedirection('engine4_blog_blogs')\n            },\n            {\n                match: [\n                    '/polls/view/:id/:title'\n                ],\n                action: handleRedirection('engine4_poll_polls')\n            },\n            {\n                match: [\n                    '/videos/:section/:id/:title'\n                ],\n                action: handleRedirection('engine4_video_videos')\n            },\n            {\n                match: [\n                    '/messages/view/id/:id'\n                ],\n                action: async (segmentKeys) => {\n                    const messageId = await app.module.migration.getKey('messages', segmentKeys[':id']);\n                    if (messageId) {\n                        return '/messages/' + messageId;\n                    }\n                }\n            }\n        ];\n        let callMatch = null;\n        const segmentKeys = [];\n        const segments = {};\n        for (const item of map) {\n            for (const match of item.match) {\n                if (app.pathToRegex(match, segmentKeys).exec(uri)) {\n                    callMatch = item.action;\n                    let matchParts = match.split('/');\n                    let uriParts = uri.split('/');\n                    for (const segment of segmentKeys) {\n                        let iteration = 0;\n                        for (const matchPart of matchParts) {\n                            if (matchPart === ':' + segment.name) {\n                                break;\n                            }\n                            iteration++;\n                        }\n                        segments[':' + segment.name] = uriParts[iteration] || null;\n                    }\n                    break;\n                }\n            }\n            if (callMatch) {\n                break;\n            }\n        }\n        if (callMatch) {\n            const r = await callMatch(segments);\n            if (r) {\n                return res({\n                    to: r\n                });\n            }\n        }\n        res({\n            error: 'No redirect found.'\n        });\n    });\n\n    router.get('/users/:id', async function (req, res) {\n        await app.api.adminsOnly();\n        res(await app.module.getUser(req.get(':id'), {\n            user_id: req.get('se_user_id')\n        }));\n    });\n\n    router.put('/users/:id', async function (req, res) {\n        await app.api.adminsOnly();\n        res({\n            id: req.get(':id'),\n            hello: await app.module.updateUser(req.get(':id'), {\n                user_id: req.get('se_user_id')\n            })\n        });\n    });\n\n    router.get('/connect/:auth', async function (req, res) {\n        await app.api.adminsOnly();\n\n        let url = req.get('return');\n        url = url.replace('/admin/unite-bridge/manage', '');\n        const apiKey = await app.site.generateNewApiKey();\n        const viewerApiToken = await app.api.users.generateApiToken(\n            app.viewer.id\n        );\n        const request = await app.fetch(url + '/bridge/connect/auth', {\n            method: 'POST',\n            body: JSON.stringify({\n                auth: req.get(':auth'),\n                apiKey: apiKey.publicKey + ':' + apiKey.privateKey,\n                viewerToken: viewerApiToken.token,\n                siteId: app.site.id()\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        const data = await request.json();\n        if (data.error !== undefined) {\n            res(data);\n        } else {\n            await app.data.set('sephp:auth', req.get(':auth'));\n            await app.data.set('sephp:token', data.token);\n            await app.data.set('sephp:url', url);\n            await app.site.rebuildJs();\n            res({\n                success: true\n            });\n        }\n    });\n\n    router.get('/migrations', async function (req, res) {\n        const migrations = [];\n        const records = app.module.migration.all();\n        for (const type of Object.keys(records)) {\n            const migration = await app.module.migration.get(type);\n            migrations.push(migration);\n        }\n        res({\n            records: migrations\n        });\n    });\n\n    router.post('/migrations/:type', async function (req, res) {\n        await app.api.adminsOnly();\n        const type = req.get(':type');\n        const page = req.get('page', 1);\n        const migrations = app.module.migration.all();\n\n        if (migrations[type] === undefined) {\n            app.error('Not a valid migration');\n        }\n\n        const socketId = app.utility.str.random(32);\n\n        await app.module.migration.set(type, 'started', app.now());\n        await app.module.migration.set(type, 'socketId', socketId);\n        await app.module.migration.set(type, 'page', page);\n        await app.module.migration.set(type, 'limit', req.get('limit', 100));\n        await app.module.migration.del(type, 'completed');\n        await app.module.migration.del(type, 'total');\n\n        const migration = await app.module.migration.get(type);\n        const id = app.task('migration', {\n            type: type,\n            limit: req.get('limit', 100),\n            returnId: req.get('returnId', false)\n        });\n        await app.module.migration.set(type, 'taskId', id);\n        res(migration);\n    });\n\n    router.get('/sso', async function (req, res) {\n        const token = req.get('token');\n        if (!token) {\n            app.error('Missing auth token');\n        }\n        const tokenKey = 'auth:token:' + token;\n        let data = await app.data.get(tokenKey);\n        if (!data) {\n            app.error('Not a valid token.');\n        }\n        await app.data.del(tokenKey);\n        data = JSON.parse(data);\n        res({\n            data: data\n        });\n    });\n\n    router.post('/sso', async function (req, res) {\n        await app.api.viewerOnly();\n        const viewer = app.viewer;\n        if (!viewer) {\n            app.error('Need to be logged in.');\n        }\n        const token = app.utility.str.random(128);\n        const user = await app.module.getUser(viewer.id);\n        const url = await app.module.getUrl();\n        const tokenKey = 'auth:token:' + token;\n        app.data.set(tokenKey, JSON.stringify({\n            uniteUserId: viewer.id,\n            viewer: await app.api.users.read(viewer.id, {\n                include: 'email'\n            }),\n            sephpUserId: user ? user.user_id : null\n        }));\n        app.data.expire(tokenKey, 300);\n        res({\n            url: url + '/bridge/connect/sso?token=' + token\n        });\n    });\n};\n",
    "events": [
        "APIRouter:match"
    ],
    "version": "1.0.7"
}