{
    "code": "const app = require('app');\n\n// EDIT[1234]\n\nasync function apiRequest (endpoint, query = {}) {\n    const url = await app.data.get('sephp:url');\n    const token = await app.data.get('sephp:token');\n    let search = '';\n    let iteration = 0;\n    for (const key of Object.keys(query)) {\n        iteration++;\n        if (iteration !== 1) {\n            search += '&';\n        }\n        search += key + '=' + query[key];\n    }\n    if (search) {\n        search = '?' + search;\n    }\n    const request = await app.fetch(url + '/bridge/migrations' + endpoint + search, {\n        headers: {\n            'SE-Unite-Token': token\n        }\n    }).catch(e => {\n        console.log(e);\n        return false;\n    });\n    const response = await request.json().catch(e => {\n        console.log(e);\n        return false;\n    });\n    // console.log('response', response);\n\n    return response;\n}\n\nfunction handleCategory (type) {\n    return async function (record) {\n        const addChannel = async function _add (record, parent = null) {\n            const props = {};\n            if (parent !== null) {\n                props.parentId = parent.id;\n            }\n            const channel = await app.api.users.create({\n                name: app.utility.str.random(6) + '-' + record.category_name,\n                type: type,\n                ...props\n            });\n            await app.module.migration.set('categories', 'reverse:' + record.category_id, channel.id);\n            console.log('Category:', type, channel.id);\n            if (record.children !== undefined) {\n                console.log('----');\n                for (const child of record.children) {\n                    await _add(child, channel);\n                }\n                console.log('----');\n            }\n        };\n        await addChannel(record);\n    };\n}\n\nasync function handleItem (record, response) {\n    let user = await app.module.getUserFromLegacyId(record.user_id);\n    await app.setViewer(user.id);\n\n    let productId = '@SE/User';\n    let typeId = 'status';\n    const legacyProps = {};\n    const props = {};\n    switch (response.table) {\n        case 'engine4_blog_blogs':\n            productId = '@SE/Topic';\n            typeId = 'topic';\n            break;\n        case 'engine4_album_albums':\n            productId = '@SE/Media';\n            typeId = 'image';\n            const storageIds = [];\n            for (const photoUrl of record.photos) {\n                const storage = await app.api.storage.create({\n                    productId: '@SE/Media',\n                    typeId: 'image',\n                    externalFile: photoUrl\n                });\n                if (storage) {\n                    storageIds.push(storage.id);\n                }\n            }\n            props.storageId = storageIds;\n            break;\n        case 'engine4_video_videos':\n            productId = '@SE/Video';\n            typeId = 'video';\n            legacyProps.video = {\n                code: record.code,\n                photo: record.photo\n            };\n            break;\n        case 'engine4_forum_topics':\n            productId = '@SE/Discussion';\n            typeId = 'discussion';\n            break;\n        case 'engine4_poll_polls':\n            productId = '@SE/User';\n            typeId = 'status';\n            props.pollQuestion = record.subject;\n            props.pollAnswer = [];\n            record.subject = '';\n            let answerIteration = 0;\n            for (const answer of record.answers) {\n                answerIteration++;\n                await app.module.migration.set('pollAnswer', answer['poll_option_id'], answerIteration);\n                props.pollAnswer.push(answer['poll_option']);\n            }\n            break;\n    }\n\n    if (record.category_id !== undefined && record.category_id) {\n        const channel = await app.module.migration.getKey('categories', 'reverse:' + record.category_id);\n        if (channel) {\n            props.channel = [channel];\n        }\n    }\n\n    if (record['creation_date'] !== undefined) {\n        props.created = app.moment(record['creation_date']).unix();\n    }\n\n    const createProps = {\n        productId: productId,\n        typeId: typeId,\n        body: record.body,\n        subject: record.subject || '',\n        objects: {\n            legacy: {\n                id: record.id,\n                type: record.type,\n                params: record.params,\n                ...legacyProps\n            }\n        },\n        ...props\n    };\n    const post = await app.api.posts.create(createProps).catch(e => {\n        console.error(e);\n        return false;\n    });\n\n    if (!post) {\n        return null;\n    }\n    await app.module.migration.set('posts', record.type + ':' + record.id, post.id);\n\n    console.log('Post[' + response.table + ']:', post.id);\n\n    if (record.type === 'polls') {\n        for (const vote of record.votes) {\n            user = await app.module.getUserFromLegacyId(vote.user_id);\n            const answerId = await app.module.migration.getKey('pollAnswer', vote['poll_option_id']);\n            await app.setViewer(user.id);\n            await app.api.posts.update(post.id, {\n                pollVote: answerId\n            });\n            console.log('Poll Vote:', vote.user_id, vote['poll_option_id'], answerId);\n        }\n    }\n\n    if (record.comments !== undefined) {\n        for (const comment of record.comments) {\n            user = await app.module.getUserFromLegacyId(comment.poster_id);\n            await app.setViewer(user.id);\n            const commentProps = {};\n            if (comment['creation_date'] !== undefined) {\n                commentProps.created = app.moment(comment['creation_date']).unix();\n            }\n            await app.api.posts.create({\n                productId: '@SE/Comment',\n                typeId: 'comment',\n                parentId: post.postId,\n                body: comment.body,\n                objects: {\n                    legacy: {\n                        id: comment.id,\n                        params: comment.params\n                    }\n                },\n                ...commentProps\n            });\n        }\n    }\n}\n\nconst handleMigration = {\n    connections: async function (record) {\n        let user = await app.module.getUserFromLegacyId(record.object_id);\n        let connection = await app.module.getUserFromLegacyId(record.subject_id);\n        await app.setViewer(user.id);\n        const response = await app.api.connections.create(connection.id).catch(() => false);\n        console.log('connection:', user.id, '->', connection.id, '->', response);\n    },\n\n    'blogs-categories': handleCategory('blogs'),\n    'albums-categories': handleCategory('photos'),\n    'videos-categories': handleCategory('videos'),\n    'forums-categories': handleCategory('discussion'),\n\n    blogs: handleItem,\n    albums: handleItem,\n    status: handleItem,\n    videos: handleItem,\n    forums: handleItem,\n    polls: handleItem,\n\n    users: async function (record) {\n        let user = await app.api.users.findByEmail(record.email);\n        if (!record.picture) {\n            record.picture = '';\n        } else {\n            record.picture = JSON.stringify(record.picture);\n        }\n        if (!user) {\n            if (!record.username) {\n                record.username = 'profile' + record.id;\n            }\n            let group = 'member';\n            switch (record.groups) {\n                case 'admin':\n                    group = 'owner';\n                    break;\n                case 'moderator':\n                    group = 'admin';\n                    break;\n            }\n            record.groups = [group];\n            record.agree = true;\n            console.log('CREATE USER:');\n            user = await app.api.users.create(record).catch(() => false);\n        } else {\n            console.log('UPDATE USER:', user.id);\n            user = await app.api.users.update(user.id, {\n                picture: record.picture\n            }).catch(() => false);\n        }\n        if (user) {\n            await app.module.migration.set('users', 'reverse:' + record.id, user.id);\n            await app.module.migration.set('users', 'data:' + user.id, JSON.stringify({\n                user_id: record.id\n            }));\n        }\n    }\n};\n\nfunction startMigration (type, cb, limit = 2) {\n    return new Promise(async function (resolve) {\n        const migration = await app.module.migration.get(type);\n        const start = async function request (page) {\n            limit = parseInt(limit);\n            const response = await apiRequest('/' + type, {\n                page: page,\n                limit: limit\n            });\n            await app.module.migration.set(type, 'total', response.total);\n            await app.module.migration.set(type, 'page', page);\n            app.websocket.send(migration.socketId, {\n                page: page,\n                total: response.total,\n                migration: await app.module.migration.get(type)\n            });\n            for (const record of response.records) {\n                await cb(record, response)\n                    .catch(e => {\n                        console.log('error:', e);\n                    });\n            }\n            if (response.records.length) {\n                return request((page + 1));\n            } else {\n                resolve();\n            }\n        };\n        return start(1);\n    });\n}\n\nmodule.exports = async function ({task}) {\n    task('migration', async function (params) {\n        const type = params.type;\n        const migration = await app.module.migration.get(type);\n        const response = await startMigration(type, handleMigration[type], params.limit).catch(() => {\n            return false;\n        });\n        if (response === false) {\n            await app.module.migration.set(type, 'failed', app.now());\n        } else {\n            await app.module.migration.set(type, 'completed', app.now());\n        }\n        app.websocket.send(migration.socketId, {\n            page: 0,\n            total: 0,\n            migration: await app.module.migration.get(type)\n        });\n    });\n};\n",
    "events": [
        "ApiProductTask.run"
    ],
    "version": "1.0.6"
}